#!/usr/bin/env bash
## Depends on the following ENV Vars being defined
# $SERVICE_GIT_URL  - the url of the git repo associated with the service
# $ORDERS_NAME      - the name of the servie being deployed, i.e. 'auth'
# $ORDERS_FILE      - Path to the orders file that contains env vars to be set

set -euo pipefail

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

# latest stable as of 5/18
NODE_VERSION_TO_INSTALL=10
NVM_VERSION_TO_INSTALL=v0.33.11
# NOTE (phd): Do we need to install a specific version isntead of the latest?
SERVERLESS_VERSION_TO_INSTALL=1.31.0

# Runtime not needed as part of buildpack, since it is included in lambda
# We use a node cli to deploy, it is installed in ./heroku directory.
# This prevents deployment since files are in use with in the dir being deployed.
# Therefore remove ./heroku directory
rm -rf "$1/.heroku"

# install nvm, npm, node
echo
echo "Install NVM $NVM_VERSION_TO_INSTALL"

# install nvm
# because script is run with sudo nvm is put in /root/.nvm making node unavailable to othe envs
# therefore, we move nvm to /home/.nvm and mak it executable
export NVM_DIR="$HOME/.nvm"
mkdir -p "$NVM_DIR"
if [ ! -s "$NVM_DIR/nvm.sh" ]; then
    curl -o- https://raw.githubusercontent.com/creationix/nvm/$NVM_VERSION_TO_INSTALL/install.sh | bash
fi

echo "Load NVM"
source "$NVM_DIR/nvm.sh"

echo
echo "Install Node v$NODE_VERSION_TO_INSTALL ---"
# serverless requires node > v6.5.0
nvm install $NODE_VERSION_TO_INSTALL

# Use this version of node
nvm use $NODE_VERSION_TO_INSTALL

# make our version the default version
nvm alias default node

# Other shells may need node. So symlink node and npm to /usr/local/bin
sudo ln -s "$(which node)" "/usr/bin/node"
sudo ln -s "$(which npm)" "/usr/bin/npm"


# install serverless framework
echo
echo "Install Serverless npm package v$SERVERLESS_VERSION_TO_INSTALL ---"
npm install -g serverless@$SERVERLESS_VERSION_TO_INSTALL

# install deployer command line tool
echo
echo "install deployer cli tool"
pushd "${SCRIPTPATH}/../src/deployer"
npm install

# deploy app to lambda
echo
echo "Call deployer on the app directory"

runtime_flag=${LAMBDA_RUNTIME:+"--runtime $LAMBDA_RUNTIME"}

"$SCRIPTPATH/deploy" $runtime_flag \
  --path $1 \
  --orders_file $ORDERS_FILE \
  --service $ORDERS_NAME \
  --container_name $CONTAINER_NAME \
  --hq $HEADQUARTERS_REMOTE \
  --account $AWS_ACCOUNT_NUMBER \
  --ship $SHIP_NAME
